swagger: '2.0'
info:
  version: 0.1.0
  title: Trailer API
  description: An API to demonstrate Swagger and Spring Boot
host: 'localhost:8081'
basePath: /api
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:

  /users:
    post:
      security:
        - Bearer: []
      description: 'Create a user'
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: created
          schema:
            type: object
        404:
          description: 'This email already exist!'
  /users/{email}:
    get:
      security:
        - Bearer: []
      description: 'Get the user with this email'
      operationId: getUserByID
      produces:
        - 'application/json'
      parameters:
        - name: email
          in: path
          description: 'email of the user'
          required: true
          type: string
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Bad request'
        401:
          description: 'You do not have necessary permissions for the resource'
        404:
          description: 'User not found'
    put:
      security:
        - Bearer: []
      description: 'Update the user with this email'
      operationId: updateUserByID
      produces:
        - 'application/json'
      parameters:
        - name: email
          in: path
          description: 'user that need to be updated'
          required: true
          type: string
        - in: body
          name: userUpdate
          description: 'Updated user object'
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Invalid user supplied'
        404:
          description: 'User not found'
    delete:
      security:
        - Bearer: []
      description: 'Delete the user with this email'
      operationId: deleteUserByID
      produces:
        - 'application/json'
      parameters:
        - name: email
          in: path
          description: 'user that needs to be deleted'
          required: true
          type: string
      responses:
        200:
          description: 'successful operation'
        400:
          description: 'Invalid username supplied'
        404:
          description: 'User not found'

  /trails:
    get:
      security:
        - Bearer: []
      description: 'Get all trails'
      operationId: getTrails
      produces:
        - 'application/json'
      parameters:
        - name: PageNumber
          in: query
          default: 0
          required: false
          type: integer
        - name: numberOfTrailsPerPage
          in: query
          default: 30
          required: false
          type: integer
      responses:
        200:
          description: 'Array with all trails'
          schema:
            type: array
            items:
              $ref: '#/definitions/TrailOutput'
    post:
      security:
        - Bearer: []
      description: 'Create a trail'
      operationId: createTrail
      consumes:
        - 'application/json'
      parameters:
        - name: trail
          in: body
          required: true
          schema:
            $ref: '#/definitions/Trail'
      responses:
        201:
          description: created
          schema:
            type: object

  /trails/{id}:
    get:
      security:
        - Bearer: []
      description: 'Get the trail by this id'
      operationId: getTrailByID
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: 'The id of the trail'
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/TrailOutput'
        400:
          description: 'Invalid Trail supplied'
        404:
          description: 'Trail not found'
    put:
      security:
        - Bearer: []
      description: 'Update the trail with this id'
      operationId: updateTrailByID
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: 'id for the trail that need to be updated'
          required: true
          type: integer
          format: int64
        - in: body
          name: trail
          description: 'Updated Trail object'
          required: true
          schema:
            $ref: '#/definitions/TrailUpdate'
      responses:
        400:
          description: 'Invalid trail supplied'
        404:
          description: 'Trail not found'
    delete:
      security:
        - Bearer: []
      description: 'Delete the trail with this id'
      operationId: deleteTrailByID
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: 'trail that needs to be deleted'
          required: true
          type: integer
          format: int64
      responses:
        400:
          description: 'Invalid Trail id supplied'
        404:
          description: 'Trail not found'

  /registrations/{email}:
    get:
      security:
        - Bearer: []
      description: 'Get All registration with this email'
      operationId: getRegistrationsByIdUser
      produces:
        - 'application/json'
      parameters:
        - name: email
          in: path
          description: 'email with registrations'
          required: true
          type: string
        - name: PageNumber
          in: query
          default: 0
          required: false
          type: integer
        - name: numberOfRegistrationsPerPage
          in: query
          default: 30
          required: false
          type: integer
      responses:
        200:
          description: read
          schema:
            type: array
            items:
              $ref: '#/definitions/RegistrationOutput'
        400:
          description: 'Invalid id supplied'
        404:
          description: 'Registration not found'
    post:
      security:
        - Bearer: []
      description: 'Create a registration for this email'
      operationId: createRegistration
      consumes:
        - 'application/json'
      parameters:
        - name: email
          in: path
          description: 'email from the user'
          required: true
          type: string
        - name: registration
          in: body
          required: true
          schema:
            $ref: '#/definitions/RegistrationInput'
      responses:
        201:
          description: created
          schema:
            type: object
        400:
          description: 'Registration problem'
    delete:
      security:
        - Bearer: []
      description: 'Delete a registration for this email'
      operationId: deleteRegistrationByID
      produces:
        - 'application/json'
      parameters:
        - name: email
          in: path
          description: 'The owner registration'
          required: true
          type: string
        - name: id
          in: query
          description: 'The registration id that needs to be deleted'
          required: true
          type: integer
          format: int64
      responses:
        400:
          description: 'Invalid id supplied'
        404:
          description: 'Registration not found'
definitions:
  UserUpdate:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
      date:
        type: string
  User:
    allOf:
      - $ref: '#/definitions/UserUpdate'
      - type: object
        properties:
          email:
            type: string
  Trail:
    type: object
    properties:
      name:
        type: string
      length:
        type: integer
      upAndDown:
        type: integer
      desprition:
        type: string
      date:
        type: string
  TrailOutput:
    allOf:
      - $ref: '#/definitions/Trail'
      - type: object
        properties:
          id:
            type: integer
            format: int64
  TrailUpdate:
    allOf:
      - $ref: '#/definitions/Trail'
      - $ref: '#/definitions/TrailOutput'
  RegistrationInput:
    type: object
    properties:
      idTrail:
        type: integer
        format: int64
  Registration:
    allOf:
      - $ref: '#/definitions/RegistrationInput'
    type: object
    properties:
      email:
        type: string
  RegistrationOutput:
    type: object
    properties:
      idTrail:
        type: integer
        format: int64
      trailName:
        type: string
      email:
        type: string
      idReg:
        type: integer
        format: int64