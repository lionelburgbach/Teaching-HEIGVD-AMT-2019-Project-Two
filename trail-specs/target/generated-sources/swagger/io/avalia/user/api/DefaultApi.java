/*
 * Trailer API
 * An API to demonstrate Swagger and Spring Boot
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.avalia.user.api;

import io.avalia.user.ApiCallback;
import io.avalia.user.ApiClient;
import io.avalia.user.ApiException;
import io.avalia.user.ApiResponse;
import io.avalia.user.Configuration;
import io.avalia.user.Pair;
import io.avalia.user.ProgressRequestBody;
import io.avalia.user.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.avalia.user.api.dto.RegistrationInput;
import io.avalia.user.api.dto.RegistrationOutput;
import io.avalia.user.api.dto.Trail;
import io.avalia.user.api.dto.TrailOutput;
import io.avalia.user.api.dto.User;
import io.avalia.user.api.dto.UserUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createRegistration
     * @param email email from the user (required)
     * @param registration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Registration problem </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistrationCall(String email, RegistrationInput registration, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registration;

        // create path and map variables
        String localVarPath = "/registrations/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegistrationValidateBeforeCall(String email, RegistrationInput registration, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createRegistration(Async)");
        }
        
        // verify the required parameter 'registration' is set
        if (registration == null) {
            throw new ApiException("Missing the required parameter 'registration' when calling createRegistration(Async)");
        }
        

        okhttp3.Call localVarCall = createRegistrationCall(email, registration, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a registration for this email
     * @param email email from the user (required)
     * @param registration  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Registration problem </td><td>  -  </td></tr>
     </table>
     */
    public Object createRegistration(String email, RegistrationInput registration) throws ApiException {
        ApiResponse<Object> localVarResp = createRegistrationWithHttpInfo(email, registration);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a registration for this email
     * @param email email from the user (required)
     * @param registration  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Registration problem </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createRegistrationWithHttpInfo(String email, RegistrationInput registration) throws ApiException {
        okhttp3.Call localVarCall = createRegistrationValidateBeforeCall(email, registration, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a registration for this email
     * @param email email from the user (required)
     * @param registration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Registration problem </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistrationAsync(String email, RegistrationInput registration, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegistrationValidateBeforeCall(email, registration, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrail
     * @param trail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrailCall(Trail trail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trail;

        // create path and map variables
        String localVarPath = "/trails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrailValidateBeforeCall(Trail trail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trail' is set
        if (trail == null) {
            throw new ApiException("Missing the required parameter 'trail' when calling createTrail(Async)");
        }
        

        okhttp3.Call localVarCall = createTrailCall(trail, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a trail
     * @param trail  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
     </table>
     */
    public Object createTrail(Trail trail) throws ApiException {
        ApiResponse<Object> localVarResp = createTrailWithHttpInfo(trail);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a trail
     * @param trail  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createTrailWithHttpInfo(Trail trail) throws ApiException {
        okhttp3.Call localVarCall = createTrailValidateBeforeCall(trail, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a trail
     * @param trail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrailAsync(Trail trail, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrailValidateBeforeCall(trail, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param user  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This email already exist! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(User user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(User user, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling createUser(Async)");
        }
        

        okhttp3.Call localVarCall = createUserCall(user, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a user
     * @param user  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This email already exist! </td><td>  -  </td></tr>
     </table>
     */
    public Object createUser(User user) throws ApiException {
        ApiResponse<Object> localVarResp = createUserWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a user
     * @param user  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This email already exist! </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createUserWithHttpInfo(User user) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a user
     * @param user  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> This email already exist! </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(User user, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRegistrationByID
     * @param email The owner registration (required)
     * @param id The registration id that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistrationByIDCall(String email, Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistrationByIDValidateBeforeCall(String email, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling deleteRegistrationByID(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRegistrationByID(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRegistrationByIDCall(email, id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a registration for this email
     * @param email The owner registration (required)
     * @param id The registration id that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRegistrationByID(String email, Long id) throws ApiException {
        deleteRegistrationByIDWithHttpInfo(email, id);
    }

    /**
     * 
     * Delete a registration for this email
     * @param email The owner registration (required)
     * @param id The registration id that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRegistrationByIDWithHttpInfo(String email, Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistrationByIDValidateBeforeCall(email, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a registration for this email
     * @param email The owner registration (required)
     * @param id The registration id that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistrationByIDAsync(String email, Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistrationByIDValidateBeforeCall(email, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrailByID
     * @param id trail that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid Trail id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrailByIDCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trails/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrailByIDValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrailByID(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTrailByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete the trail with this id
     * @param id trail that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid Trail id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTrailByID(Long id) throws ApiException {
        deleteTrailByIDWithHttpInfo(id);
    }

    /**
     * 
     * Delete the trail with this id
     * @param id trail that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid Trail id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTrailByIDWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteTrailByIDValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the trail with this id
     * @param id trail that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid Trail id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrailByIDAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrailByIDValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserByID
     * @param email user that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid username supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserByIDCall(String email, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserByIDValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling deleteUserByID(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserByIDCall(email, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete the user with this email
     * @param email user that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid username supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserByID(String email) throws ApiException {
        deleteUserByIDWithHttpInfo(email);
    }

    /**
     * 
     * Delete the user with this email
     * @param email user that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid username supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserByIDWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = deleteUserByIDValidateBeforeCall(email, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the user with this email
     * @param email user that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid username supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserByIDAsync(String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserByIDValidateBeforeCall(email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistrationsByIdUser
     * @param email email with registrations (required)
     * @param pageNumber  (optional, default to 0)
     * @param numberOfRegistrationsPerPage  (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> read </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationsByIdUserCall(String email, Integer pageNumber, Integer numberOfRegistrationsPerPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registrations/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageNumber", pageNumber));
        }

        if (numberOfRegistrationsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfRegistrationsPerPage", numberOfRegistrationsPerPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistrationsByIdUserValidateBeforeCall(String email, Integer pageNumber, Integer numberOfRegistrationsPerPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getRegistrationsByIdUser(Async)");
        }
        

        okhttp3.Call localVarCall = getRegistrationsByIdUserCall(email, pageNumber, numberOfRegistrationsPerPage, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get All registration with this email
     * @param email email with registrations (required)
     * @param pageNumber  (optional, default to 0)
     * @param numberOfRegistrationsPerPage  (optional, default to 30)
     * @return List&lt;RegistrationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> read </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public List<RegistrationOutput> getRegistrationsByIdUser(String email, Integer pageNumber, Integer numberOfRegistrationsPerPage) throws ApiException {
        ApiResponse<List<RegistrationOutput>> localVarResp = getRegistrationsByIdUserWithHttpInfo(email, pageNumber, numberOfRegistrationsPerPage);
        return localVarResp.getData();
    }

    /**
     * 
     * Get All registration with this email
     * @param email email with registrations (required)
     * @param pageNumber  (optional, default to 0)
     * @param numberOfRegistrationsPerPage  (optional, default to 30)
     * @return ApiResponse&lt;List&lt;RegistrationOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> read </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RegistrationOutput>> getRegistrationsByIdUserWithHttpInfo(String email, Integer pageNumber, Integer numberOfRegistrationsPerPage) throws ApiException {
        okhttp3.Call localVarCall = getRegistrationsByIdUserValidateBeforeCall(email, pageNumber, numberOfRegistrationsPerPage, null);
        Type localVarReturnType = new TypeToken<List<RegistrationOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get All registration with this email
     * @param email email with registrations (required)
     * @param pageNumber  (optional, default to 0)
     * @param numberOfRegistrationsPerPage  (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> read </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid id supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Registration not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistrationsByIdUserAsync(String email, Integer pageNumber, Integer numberOfRegistrationsPerPage, final ApiCallback<List<RegistrationOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistrationsByIdUserValidateBeforeCall(email, pageNumber, numberOfRegistrationsPerPage, _callback);
        Type localVarReturnType = new TypeToken<List<RegistrationOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrailByID
     * @param id The id of the trail (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailByIDCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trails/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrailByIDValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTrailByID(Async)");
        }
        

        okhttp3.Call localVarCall = getTrailByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the trail by this id
     * @param id The id of the trail (required)
     * @return TrailOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public TrailOutput getTrailByID(Long id) throws ApiException {
        ApiResponse<TrailOutput> localVarResp = getTrailByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the trail by this id
     * @param id The id of the trail (required)
     * @return ApiResponse&lt;TrailOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrailOutput> getTrailByIDWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getTrailByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TrailOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the trail by this id
     * @param id The id of the trail (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailByIDAsync(Long id, final ApiCallback<TrailOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrailByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TrailOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTrails
     * @param pageNumber  (optional, default to 0)
     * @param numberOfTrailsPerPage  (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array with all trails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailsCall(Integer pageNumber, Integer numberOfTrailsPerPage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageNumber", pageNumber));
        }

        if (numberOfTrailsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfTrailsPerPage", numberOfTrailsPerPage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrailsValidateBeforeCall(Integer pageNumber, Integer numberOfTrailsPerPage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTrailsCall(pageNumber, numberOfTrailsPerPage, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get all trails
     * @param pageNumber  (optional, default to 0)
     * @param numberOfTrailsPerPage  (optional, default to 30)
     * @return List&lt;TrailOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array with all trails </td><td>  -  </td></tr>
     </table>
     */
    public List<TrailOutput> getTrails(Integer pageNumber, Integer numberOfTrailsPerPage) throws ApiException {
        ApiResponse<List<TrailOutput>> localVarResp = getTrailsWithHttpInfo(pageNumber, numberOfTrailsPerPage);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all trails
     * @param pageNumber  (optional, default to 0)
     * @param numberOfTrailsPerPage  (optional, default to 30)
     * @return ApiResponse&lt;List&lt;TrailOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array with all trails </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TrailOutput>> getTrailsWithHttpInfo(Integer pageNumber, Integer numberOfTrailsPerPage) throws ApiException {
        okhttp3.Call localVarCall = getTrailsValidateBeforeCall(pageNumber, numberOfTrailsPerPage, null);
        Type localVarReturnType = new TypeToken<List<TrailOutput>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all trails
     * @param pageNumber  (optional, default to 0)
     * @param numberOfTrailsPerPage  (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array with all trails </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTrailsAsync(Integer pageNumber, Integer numberOfTrailsPerPage, final ApiCallback<List<TrailOutput>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrailsValidateBeforeCall(pageNumber, numberOfTrailsPerPage, _callback);
        Type localVarReturnType = new TypeToken<List<TrailOutput>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserByID
     * @param email email of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You do not have necessary permissions for the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByIDCall(String email, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIDValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling getUserByID(Async)");
        }
        

        okhttp3.Call localVarCall = getUserByIDCall(email, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get the user with this email
     * @param email email of the user (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You do not have necessary permissions for the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public User getUserByID(String email) throws ApiException {
        ApiResponse<User> localVarResp = getUserByIDWithHttpInfo(email);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the user with this email
     * @param email email of the user (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You do not have necessary permissions for the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserByIDWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = getUserByIDValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the user with this email
     * @param email email of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You do not have necessary permissions for the resource </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserByIDAsync(String email, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIDValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrailByID
     * @param id id for the trail that need to be updated (required)
     * @param trail Updated Trail object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrailByIDCall(Long id, Trail trail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trail;

        // create path and map variables
        String localVarPath = "/trails/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrailByIDValidateBeforeCall(Long id, Trail trail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTrailByID(Async)");
        }
        
        // verify the required parameter 'trail' is set
        if (trail == null) {
            throw new ApiException("Missing the required parameter 'trail' when calling updateTrailByID(Async)");
        }
        

        okhttp3.Call localVarCall = updateTrailByIDCall(id, trail, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the trail with this id
     * @param id id for the trail that need to be updated (required)
     * @param trail Updated Trail object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateTrailByID(Long id, Trail trail) throws ApiException {
        updateTrailByIDWithHttpInfo(id, trail);
    }

    /**
     * 
     * Update the trail with this id
     * @param id id for the trail that need to be updated (required)
     * @param trail Updated Trail object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTrailByIDWithHttpInfo(Long id, Trail trail) throws ApiException {
        okhttp3.Call localVarCall = updateTrailByIDValidateBeforeCall(id, trail, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the trail with this id
     * @param id id for the trail that need to be updated (required)
     * @param trail Updated Trail object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid trail supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Trail not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrailByIDAsync(Long id, Trail trail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrailByIDValidateBeforeCall(id, trail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserByID
     * @param email user that need to be updated (required)
     * @param userUpdate Updated user object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserByIDCall(String email, UserUpdate userUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userUpdate;

        // create path and map variables
        String localVarPath = "/users/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserByIDValidateBeforeCall(String email, UserUpdate userUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling updateUserByID(Async)");
        }
        
        // verify the required parameter 'userUpdate' is set
        if (userUpdate == null) {
            throw new ApiException("Missing the required parameter 'userUpdate' when calling updateUserByID(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserByIDCall(email, userUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the user with this email
     * @param email user that need to be updated (required)
     * @param userUpdate Updated user object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateUserByID(String email, UserUpdate userUpdate) throws ApiException {
        updateUserByIDWithHttpInfo(email, userUpdate);
    }

    /**
     * 
     * Update the user with this email
     * @param email user that need to be updated (required)
     * @param userUpdate Updated user object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateUserByIDWithHttpInfo(String email, UserUpdate userUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateUserByIDValidateBeforeCall(email, userUpdate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the user with this email
     * @param email user that need to be updated (required)
     * @param userUpdate Updated user object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid user supplied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserByIDAsync(String email, UserUpdate userUpdate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserByIDValidateBeforeCall(email, userUpdate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
