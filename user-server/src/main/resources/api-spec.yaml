swagger: '2.0'
info:
  version: 0.1.0
  title: Users API
  description: An API to demonstrate Swagger and Spring Boot
host: 'localhost:8080'
basePath: /api
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header

paths:

  /authenticate:
    post:
      description: try to authenticate
      operationId: createAuthenticationToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userAuth
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserAuth'
      responses:
        200:
          description: get your token
          schema:
            type: object
            items:
              $ref: '#/definitions/JwtResponse'
        401:
          description: 'You sucks'
  /users:
    post:
      security:
        - Bearer: []
      description: create a user
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - name: userInput
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserInput'
      responses:
        201:
          description: created
          schema:
            type: object
        403:
          description: 'You do not have necessary permissions for the resource'
    get:
      security:
        - Bearer: []
      description: get user paramater
      operationId: getUsers
      produces:
        - application/json
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/UserOutput'
        403:
          description: 'You do not have necessary permissions for the resource'
  /users/{email}:
    get:
      security:
        - Bearer: []
      description: ""
      operationId: getUserByID
      produces:
        - "application/json"
      parameters:
        - name: email
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: string
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserOutput"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
        403:
          description: 'You do not have necessary permissions for the resource'
    put:
      security:
        - Bearer: []
      description: ""
      operationId: updateUser
      produces:
        - "application/json"
      parameters:
        - name: email
          in: path
          description: "name that need to be updated"
          required: true
          type: string
        - in: body
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        403:
          description: 'You do not have necessary permissions for the resource'
    delete:
      security:
        - Bearer: []
      description: "This can only be done by the logged in user."
      operationId: deleteUser
      produces:
        - "application/json"
      parameters:
        - name: email
          in: path
          description: "The name that needs to be deleted"
          required: true
          type: string
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
        403:
          description: 'You do not have necessary permissions for the resource'
definitions:
  User:
    type: object
    properties:
      email:
        type: string
  UserAuth:
    allOf:
      - $ref: "#/definitions/User"
      - type: object
      - properties:
          password:
            type: string
  UserOutput:
    allOf:
      - $ref: "#/definitions/User"
      - type: object
      - properties:
          firstname:
            type: string
          lastname:
            type: string
  UserInput:
    allOf:
      - $ref: "#/definitions/User"
      - $ref: "#/definitions/UserAuth"
      - $ref: "#/definitions/UserOutput"
      - type: object
      - properties:
          role:
            type: string
  UserUpdate:
    allOf:
      - $ref: "#/definitions/UserAuth"
      - type: object
      - properties:
          firstname:
            type: string
          lastname:
            type: string
          role:
            type: string
  JwtResponse:
    type: object
    properties:
      jwttoken:
        type: string